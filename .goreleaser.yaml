# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

# Project name should ideally match the project name in your Cargo.toml.
project_name: tg-stickerize

# Hooks ran before actually building anything.
# Here we use them to prepare for building.
before:
  hooks:
    - rustup default stable
    # - cargo install --locked cargo-zigbuild
    - cargo install --locked cargo-cross
    - cargo fetch --locked

# Actually builds the binaries.
builds:
  - builder: rust
    tool: cross
    command: build
    targets:
      - x86_64-unknown-linux-gnu
      # - x86_64-apple-darwin
      - x86_64-pc-windows-gnu
      - aarch64-unknown-linux-gnu
      # - aarch64-apple-darwin

# Creates archives for each target.
archives:
  - formats: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: zip

# Changelog configuration (will be in the github release).
changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

# # A footer to add to all releases.
# release:
#   footer: >-
#
#     ---
#
#     Released by [GoReleaser](https://github.com/goreleaser/goreleaser).

# Enables source archives.
source:
  enabled: true

# Create Docker images.
# We create a manifest below, so here the images need the suffix with the
# architecture.
dockers:
  - image_templates:
      - "ghcr.io/sakarie9/{{.ProjectName}}:{{ .Tag }}-arm64"
    dockerfile: Dockerfile
    goarch: arm64
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.name={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
      - "--platform=linux/arm64"
  - image_templates:
      - "ghcr.io/sakarie9/{{.ProjectName}}:{{ .Tag }}-amd64"
    dockerfile: Dockerfile
    goarch: amd64
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.name={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
      - "--platform=linux/amd64"

# Here we join both images into a Docker manifest.
docker_manifests:
  - name_template: "ghcr.io/sakarie9/{{.ProjectName}}:{{ .Tag }}"
    image_templates:
      - "ghcr.io/sakarie9/{{.ProjectName}}:{{ .Tag }}-arm64"
      - "ghcr.io/sakarie9/{{.ProjectName}}:{{ .Tag }}-amd64"

# Sign the Docker images with cosign as well.
docker_signs:
  - cmd: cosign
    artifacts: manifests
    args:
      - "sign"
      - "${artifact}"
      - "--yes"
